// 寫一個函數，收集數組中的所有值並傳回收集到的值數組。
// Ex.
// let arrs = [[[["a", [["b", ["c"]], ["d"]]], [["e"]], [[["f", "g", "h"]]]]]];
// collector(arrs) // [a, b, c, d, e, f, g, h]
let arrs = [[[["a", [["b", ["c"]], ["d"]]], [["e"]], [[["f", "g", "h"]]]]]];

const array_of_arrays = function (arrs) {
  // 先定義ans為空陣列
  let ans = [];

  // 定義func函數，用來蒐集不為陣列的值，是一個recursion函數
  const func = function (value) {
    // 如果value是函數的話代表裡面可能有不只一個element
    if (Array.isArray(value)) {
      console.log(value);
      console.log(`為Array`);
      // 如果value是Array的話就forEach遍歷value的element，並再將element作為參數呼叫func() => 此時stack會往上疊
      value.forEach((element, index) => {
        console.log("=============================");
        console.log("正在遍歷");
        console.log(value);
        console.log(`的第${index}項`);
        func(element);
      });
    } else {
      // value不是Array的話就新增ans Array中，此時stack會移除一層
      console.log("---------------------------");
      console.log(`${value}不是Array`);
      ans.push(value);
    }
  };

  func(arrs);

  return ans;
};
console.log(array_of_arrays(arrs));

// Console Log
// [ [ [ [Array], [Array], [Array] ] ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ [ [Array], [Array], [Array] ] ] ]
// 的第0項
// [ [ [ 'a', [Array] ], [ [Array] ], [ [Array] ] ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ [ 'a', [Array] ], [ [Array] ], [ [Array] ] ] ]
// 的第0項
// [ [ 'a', [ [Array], [Array] ] ], [ [ 'e' ] ], [ [ [Array] ] ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ 'a', [ [Array], [Array] ] ], [ [ 'e' ] ], [ [ [Array] ] ] ]
// 的第0項
// [ 'a', [ [ 'b', [Array] ], [ 'd' ] ] ]
// 為Array
// =============================
// 正在遍歷
// [ 'a', [ [ 'b', [Array] ], [ 'd' ] ] ]
// 的第0項
// ---------------------------
// a不是Array
// =============================
// 正在遍歷
// [ 'a', [ [ 'b', [Array] ], [ 'd' ] ] ]
// 的第1項
// [ [ 'b', [ 'c' ] ], [ 'd' ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ 'b', [ 'c' ] ], [ 'd' ] ]
// 的第0項
// [ 'b', [ 'c' ] ]
// 為Array
// =============================
// 正在遍歷
// [ 'b', [ 'c' ] ]
// 的第0項
// ---------------------------
// b不是Array
// =============================
// 正在遍歷
// [ 'b', [ 'c' ] ]
// 的第1項
// [ 'c' ]
// 為Array
// =============================
// 正在遍歷
// [ 'c' ]
// 的第0項
// ---------------------------
// c不是Array
// =============================
// 正在遍歷
// [ [ 'b', [ 'c' ] ], [ 'd' ] ]
// 的第1項
// [ 'd' ]
// 為Array
// =============================
// 正在遍歷
// [ 'd' ]
// 的第0項
// ---------------------------
// d不是Array
// =============================
// 正在遍歷
// [ [ 'a', [ [Array], [Array] ] ], [ [ 'e' ] ], [ [ [Array] ] ] ]
// 的第1項
// [ [ 'e' ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ 'e' ] ]
// 的第0項
// [ 'e' ]
// 為Array
// =============================
// 正在遍歷
// [ 'e' ]
// 的第0項
// ---------------------------
// e不是Array
// =============================
// 正在遍歷
// [ [ 'a', [ [Array], [Array] ] ], [ [ 'e' ] ], [ [ [Array] ] ] ]
// 的第2項
// [ [ [ 'f', 'g', 'h' ] ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ [ 'f', 'g', 'h' ] ] ]
// 的第0項
// [ [ 'f', 'g', 'h' ] ]
// 為Array
// =============================
// 正在遍歷
// [ [ 'f', 'g', 'h' ] ]
// 的第0項
// [ 'f', 'g', 'h' ]
// 為Array
// =============================
// 正在遍歷
// [ 'f', 'g', 'h' ]
// 的第0項
// ---------------------------
// f不是Array
// =============================
// 正在遍歷
// [ 'f', 'g', 'h' ]
// 的第1項
// ---------------------------
// g不是Array
// =============================
// 正在遍歷
// [ 'f', 'g', 'h' ]
// 的第2項
// ---------------------------
// h不是Array
// [
//   'a', 'b', 'c',
//   'd', 'e', 'f',
//   'g', 'h'
// ]
